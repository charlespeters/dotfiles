"==============================
"
"
"
" Vim & NeoVim Runtime Configuration
"
"
"==============================

" The following settings are for Vim not Neovim
set nocompatible              " be iMproved, required
filetype off                  " required

"==============================
" Plugins
"==============================

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle manages Vundle, required
Plugin 'gmarik/Vundle.vim'

" Colors
Plugin 'charlespeters/ganymede.vim'
Plugin 'chriskempson/base16-vim'

"" HTML
Plugin 'othree/html5.vim'
Plugin 'tpope/vim-markdown'

"" CSS
Plugin 'lilydjwg/colorizer', { 'for': ['css', 'scss', 'postcss.css', 'html', 'javascript', 'javascript.jsx'] }
Plugin 'JulesWang/css.vim'
Plugin 'stephenway/postcss.vim'

"" Javascript
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'sheerun/vim-json'

"" Reason
Plugin 'reasonml-editor/vim-reason-plus'

"" Elixir
Plugin 'slashmili/alchemist.vim'
Plugin 'elixir-lang/vim-elixir'

" Interface
Plugin 'itchyny/lightline.vim'
Plugin 'felixjung/vim-base16-lightline'
Plugin 'taohex/lightline-buffer'
Plugin 'airblade/vim-gitgutter'

" Utilities
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/vim-emoji'
Plugin 'junegunn/limelight.vim'
Plugin 'tpope/vim-obsession'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-commentary'
Plugin 'gilsondev/searchtasks.vim'
Plugin 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plugin 'w0rp/ale'
Plugin 'prettier/vim-prettier', { 'do': 'yarn install' }
Plugin 'reedes/vim-pencil', { 'for': 'markdown' }

" Snippets
Plugin 'epilande/vim-es2015-snippets'
Plugin 'epilande/vim-react-snippets'
Plugin 'SirVer/ultisnips'

call vundle#end()            " required
filetype plugin indent on    " required


"==============================
" Configuration
"==============================

" Default Settings

syntax enable

set shell=$SHELL
set encoding=utf-8
set number
set lazyredraw
set background=dark
set relativenumber
set cursorline
set showcmd
set showmatch
set ruler
set mouse=a

" Search Settings

set incsearch
set hlsearch
set ignorecase
set smartcase

" Window Splits

set splitright
set splitbelow

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Tabs & Spaces

set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set laststatus=2
set cc=95
set smartindent
set showtabline=2

" Colors Themes & Font Settings
let base16colorspace=256
set t_Co=256

colorscheme base16-ocean

if has('termguicolors')
	set termguicolors
  " Don't need this in xterm-256color, but do need it inside tmux.
  " (See `:h xterm-true-color`.)
  if &term =~# 'tmux-256color'
    let &t_8f="\e[38;2;%ld;%ld;%ldm"
    let &t_8b="\e[48;2;%ld;%ld;%ldm"
  endif
endif

hi NonText ctermbg=NONE guibg=NONE
hi Normal ctermbg=NONE guibg=NONE

" Highlights

highlight SignColumn ctermfg=DarkBlue ctermbg=NONE
highlight SignColumnNR ctermbg=black
highlight LineNr ctermfg=DarkGrey ctermbg=NONE
highlight CursorLineNR ctermbg=NONE ctermfg=Grey cterm=bold
highlight CursorLine ctermbg=NONE cterm=NONE
highlight Comment cterm=italic

" Show syntax highlighting groups for word under cursor
nmap <F2> :call <SID>SynStack()<CR>
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Clipboard

set clipboard=unnamed
set clipboard+=unnamedplus

"==============================
" Plugin Settings
"==============================

" JSX

let g:jsx_ext_required = 1  
let g:jsx_pragma_required = 1

" Limelight

let g:limelight_conceal_ctermfg = 'black'
let g:limelight_conceal_guifg = 'black'

" Lightline

let g:lightline = {
    \ 'colorscheme': 'base16_ocean',
    \ 'tabline': {
    \   'left': [ [ 'bufferinfo' ],
    \             [ 'separator' ],
    \             [ 'bufferbefore', 'buffercurrent', 'bufferafter' ], ],
    \   'right': [ [ 'close' ], ],
    \ },
    \ 'component_expand': {
    \   'buffercurrent': 'lightline#buffer#buffercurrent',
    \   'bufferbefore': 'lightline#buffer#bufferbefore',
    \   'bufferafter': 'lightline#buffer#bufferafter',
    \ },
    \ 'component_type': {
    \   'buffercurrent': 'tabsel',
    \   'bufferbefore': 'raw',
    \   'bufferafter': 'raw',
    \ },
    \ 'component_function': {
    \   'bufferinfo': 'lightline#buffer#bufferinfo',
    \ },
    \ 'component': {
    \   'separator': '',
    \ },
    \ }

" Gitgutter

call gitgutter#highlight#define_highlights()
highlight GitGutterAdd ctermbg=black ctermfg=green
highlight GitGutterChange ctermbg=black ctermfg=yellow
highlight GitGutterDelete ctermbg=black ctermfg=red
highlight GitGutterChangeDelete ctermbg=black ctermfg=yellow

let g:gitgutter_max_signs = 500


" Syntastic Checkers

" ALE Asynchronous Lint Engine
let g:ale_sign_column_always = 1
let g:ale_sign_error = '⚠'
let g:ale_sign_warning = '∅'
let g:ale_linters = {
      \'javascript': ['flow']
      \}

" YouCompleteMe

set completeopt+=noinsert,noselect
set completeopt-=preview

" Snippets

let g:UltiSnipsExpandTrigger="<C-l>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Not Sure

let g:enable_bold_font = 1

" Markdown

let g:markdown_fenced_languages = ['html', 'css=postcss.css', 'js=javascript.jsx']

"==============================
" GUI Vim Settings
"==============================

" For NeoVim

let g:python3_host_prog = '/usr/local/bin/python3'
let g:loaded_python_provider = 1

" Remaps Esc to leave Terminal mode
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
endif

" VimR Settings

if has('gui_vimr')
  if (has("termguicolors"))
    set termguicolors
  endif
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

" MacVim
if has('gui_running')
  set transparency=5
  set guifont=Operator\ Mono:h13
endif

if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif

"==============================
" File Types
"==============================

autocmd BufNewFile,BufRead *.css set filetype=postcss.css
autocmd BufNewFile,BufRead *.hbs set filetype=mustache.html
autocmd BufNewFile,BufRead *.md  set filetype=markdown
autocmd BufNewFile,BufRead *.js  set filetype=javascript.jsx


" JSX Fixes

function! s:base16_customize() abort
  call Base16hi("Tag", g:base16_gui0D, "", g:base16_cterm0D, "", "", "")
  call Base16hi("xmlTag", g:base16_gui0D, "", g:base16_cterm0D, "", "", "")
  call Base16hi("jsxRegion", g:base16_gui0D, "", g:base16_cterm0D, "", "", "")
  call Base16hi("xmlTagName", g:base16_gui0D, "", g:base16_cterm0D, "", "", "")
  call Base16hi("xmlEndTag", g:base16_gui0D, "", g:base16_cterm0D, "", "", "")
endfunction

augroup on_change_colorschema
  autocmd!
  autocmd ColorScheme * call s:base16_customize()
augroup END


"==============================
" Mappings
"==============================

" Leader

let mapleader = ","

nnoremap <leader>j :m .+1<CR>==
nnoremap <leader>k :m .-2<CR>==
inoremap <leader>j <Esc>:m .+1<CR>==gi
inoremap <leader>k <Esc>:m .-2<CR>==gi
vnoremap <leader>j :m '>+1<CR>gv=gv
vnoremap <leader>k :m '<-2<CR>gv=gv

" FZF

nnoremap <C-t> :Files<CR>
inoremap <C-t> <ESC>:Files<CR>

" No Remap for Arrow Keys

inoremap <ScrollWheelUp> <Nop>
inoremap <ScrollWheelDown> <Nop>
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>
